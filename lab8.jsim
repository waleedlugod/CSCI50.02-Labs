*******************************************************************************
* Replace this header comment with your names!
* - Follow "Last Name, First Name" format
* - Sort alphabetically
*******************************************************************************

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

*******************************************************************************
* The $memory statement defines a memory device. Each memory device comes with
* one or more ports, each of which may be used for either reading or writing.
*
* Usage:
*   Xid  <port def>
*   +    <port def>
*   +    ...
*   + $memory width=<w> nlocations=<n> [file="<x.bin>" | contents=(<c c c>...)]
*
* <port def> is in the format "<oe> <clk> <wen> <addr[...]> <data[...]>"
*
* w     = the number of data lines (normally 32 in a 32-bit processor)
* n     = the number of memory locations (addresses) in this memory device
* x.bin = any .bin file that defines the initial contents of the memory
*         (must be in the same directory as JSim)
* c c c = defines the initial contents of the memory in an _inline_ manner
*         (i.e., not in an external file)
* oe    = "output enable", enables the memory device to output to the data
*         lines; this must be ON for read ports and OFF for write ports
* clk   = a clock input, needed for write ports; the data is written during a
*         rising edge
* wen   = "write enable", must be ON whenever we want to write to a write port
* addr  = a set of lines that contains the address to be accessed by the port
* data  = a set of lines that contains the data to be output (for read ports)
*         or the data to be written into memory (for write ports)
*
* The number of addr lines provided must be equal to ceiling(log2(nlocations)).
* The number of data lines provided must be equal to width.
*
* Note that if nlocations is not a power of 2, trying to address a non-existent
* memory location will result in an invalid read! Example: if nlocations=31
* instead of 32 and addr=0b11111 (31), the output of the device is undefined!
*******************************************************************************

*******************************************************************************
* Xmemory is a 512-byte main memory containing both user instructions and data.
*   1st line = read port for the next instruction to process (inst)
*   2nd line = read port for LD instructions (memrd)
*   3rd line = write port for ST instructions (memwd, controlled by wr signal)
*   5th line = the memory statement itself
* TODO: Copy your Beta program's BSim assembler output (.bin file) to your JSim
*       folder and change the file= parameter accordingly!
*******************************************************************************
Xmemory  vdd  0    0   pc[8:2]    inst[31:0]
+        vdd  0    0   mema[8:2]  memrd[31:0]
+        0    clk  wr  mema[8:2]  memwd[31:0]
+ $memory width=32 nlocations=128 file="lab7.bin"

*******************************************************************************
* Xregisters is a register memory device to store your Beta registers r0 - r31.
*   1st line = read port for rd1_
*   2nd line = read port for rd2_
*   3rd line = write port for wd (controlled by werf_ signal)
*   4th line = the memory statement itself
*   succeeding lines = initial values of the registers
*******************************************************************************
Xregisters  vdd  0    0      ra1_[4:0]  rd1_[31:0]
+           vdd  0    0      ra2_[4:0]  rd2_[31:0]
+           0    clk  werf_  wa[4:0]    wd[31:0]
+ $memory width=32 nlocations=32 contents=(
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+ )

*******************************************************************************
* Temporarily connect werf_ directly to werf.
* TODO: You must replace this with circuitry so that if wa[4:0] = 0b11111 (31),
*       the werf_ signal is forced OFF; otherwise, it should pass through the
*       original werf signal.
*******************************************************************************
.connect werf werf_

*******************************************************************************
* Xcontrol is a read-only memory (ROM) that defines what to feed into the
* control signal lines of your final Beta circuit, depending on what opcode
* was read from your instruction memory (along with an additional signal "z"
* signifying the evaluation result of a BEQ or BNE instruction).
*   1st line = read port w/ 7 address lines (z + 6-bit opcode) + 14 data lines
*   2nd line = the memory statement itself
*   succeeding lines = the control signals (14 bits each) for all 64 opcodes
*                      times 2 (first half is for z = 0, second half for z = 1)
* TODO: Fill these lines with the proper control signals for each opcode!
*******************************************************************************
Xcontrol  vdd  0  0  z opcode[5:0]  control[13:0]
+ $memory width=14 nlocations=128 contents=(
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+ )

*******************************************************************************
* Helper subckt to facilitate multi-bit joins.
*******************************************************************************
.subckt join S T
  .connect S T
.ends

*******************************************************************************
* The following .connect statements define what control signal goes to which
* of the 14 bits of the control ROM's output. The bits are ordered as they
* appear in the control logic diagram of your 50.01 slides.
*******************************************************************************
Xjcontrola control[13:12] pcsel[1:0] join
Xjcontrolb control11      ra2sel     join
Xjcontrolc control10      bsel       join
Xjcontrold control[9:8]   wdsel[1:0] join
Xjcontrole control[7:2]   alufn[5:0] join
Xjcontrolf control1       wr         join
Xjcontrolg control0       werf       join

*******************************************************************************
* Also connect our instruction signal lines to our opcode, rc, ra, rb, and c.
*******************************************************************************
Xjinsta inst[31:26] opcode[5:0] join
Xjinstb inst[25:21] rc[4:0]     join
Xjinstc inst[20:16] ra[4:0]     join
Xjinstd inst[15:11] rb[4:0]     join
Xjinste inst[15:0]  c[15:0]     join

*******************************************************************************
* Temporarily connect pc[] to the predefined clocks so that we can view each
* instruction in sequence.
* Note that you will need to replace this with a real program counter circuit
* in the final lab!
*******************************************************************************
Xjpc clk[8:2] pc[8:2] join
.connect 0 pc[1:0]

*******************************************************************************
* Temporarily connect other undefined signals.
* Note that you will need to remove these signals from this section once you
* connect them elsewhere!
*******************************************************************************
.connect vdd clk ra1_[4:0] ra2_[4:0] wa[4:0] wd[31:0] mema[8:0] memwd[31:0]
.connect 0 z

*******************************************************************************
* Plot some signals together (or else we won't have enough space in the plot
* window)
*******************************************************************************
Xjdisplaya ra2_b_wdsel[3:0] ra2sel bsel wdsel[1:0] join
Xjdisplayb wr_werfs[2:0]    wr werf werf_          join

*******************************************************************************
* This section plots the following signals in order:
* - pc (program counter)
* - beta operation mnemonic (taken from the 6-bit opcode header)
* - ra, rb, rc (taken from the rest of the instruction opcode)
* - c (taken from the last 16 bits of the instruction opcode)
* - control signals (i.e., output of the control logic)
* - rd1_ (result of reading address ra1_)
* - rd2_ (result of reading address ra2_)
* - wd (value being written to address wa -- but only if wr is 1)
* - mema (address to access in main memory)
* - memrd (result of reading address mema)
* - memwd (value being written to address mema -- but only if werf is 1)
*
* Since the circuit is incomplete, the values will be invalid starting from the
* control signals. After you're done with this current lab, the control signals
* should be correct. (After you're done with the final lab, everything should
* be correct!)
*
* IMPORTANT: Since z is currently connected to 0, only the first half of your
*            table of control logic signals is returned. To test the second
*            half of your table, modify the ".connect 0 z" statement above
*            this section to ".connect vdd z". (Remember that in the final
*            lab, z should instead be computed by some circuit instead of
*            connected to ground or vdd!)
*******************************************************************************
.tran 1280ns
.plot pc[8:0]
.plot betaop(opcode[5:0])
.plot d(ra[4:0])
.plot d(rb[4:0])
.plot d(rc[4:0])
.plot sd(c[15:0])
.plot b(pcsel[1:0])
.plot b(ra2_b_wdsel[3:0])
.plot b(alufn[5:0])
.plot b(wr_werfs[2:0])
.plot sd(rd1_[31:0])
.plot sd(rd2_[31:0])
.plot sd(wd[31:0])
.plot d(mema[8:0])
.plot sd(memrd[31:0])
.plot sd(memwd[31:0])
