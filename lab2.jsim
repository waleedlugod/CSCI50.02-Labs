* Lugod, Waleed
* Sagusay, Joseph
* Warain, John Victor
.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

**********************************************************
* The task of a full adder is to add three bits: input1, input2, & cin.
* We know that a half adder can only add two bits and yield two outputs.
* Therefoe, to create a full adder, we can just use two half adders.
*
* We first "half add" the first two inputs, say A and B, and get the resulting sum bit.
* The sum bit is then "half added" to cin, and the resulting sum of this is the sum of the full adder.

* Meanwhile, if any of the couts of the the two half adders yield a 1, then we know that the cout of the full adder is also a 1. 
* The above statement used two AND gates and one OR gate.
* The AND and OR gates were converted to NAND gates using the "bubble technique."
*
*The implementation of this is shown below.
**********************************************************
.subckt halfAdder a b sum cout
Xsub1 a b sum xor2
Xsub2 a b cout nand2
.ends

.subckt fa a b cin fsum fcout
Xsub1 a b tsum t1cout halfAdder
Xsub2 tsum cin fsum t2cout halfAdder
Xsub3 t1cout t2cout fcout nand2
.ends

Xtest clk1 clk2 clk3 sum cout fa

.tran 40ns
.plot clk1
.plot clk2
.plot clk3
.plot sum
.plot cout


